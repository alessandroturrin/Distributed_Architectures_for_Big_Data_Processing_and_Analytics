1)b
2)a

EXERCISE 1
class Item{
	private String Pid, date;

	public Item(String Pid, String date){
		this.Pid = Pid;
		this.date = date;
	}
	
	public String getDate(){
		return this.date;
	}
	
	public String getPid(){
		return this.Pid;
	}
}

class MapperBigData1 extends Mapper<
                    LongWritable, 
                    Text,         
                    Text,         
                    Item> {
    
    protected void map(
            LongWritable key,   
            Text value,         
            Context context) throws IOException, InterruptedException {

		String elems[] = value.toString.split(",");
		String year = elems[2].split("/")[0];

		if(year.equals("2022"))
			context.write(new Text(elems[0]), new Item(elems[0],elems[2]));
			
					
	}
}

class ReducerBigData1 extends Reducer<
                Text,           
                Item,    
                Text,           
                Text> {  
    
    @Override
    protected void reduce(
        Text key, 
        Iterable<Item> values, 
        Context context) throws IOException, InterruptedException {
		
		Item mostRecent = new Item("0", "2021/12/12");
	
		for(Item value: values)
			if(value.getDate().compareTo(mostRecent.getDate())>0)
				mostRecent = new Item(value.getPid(), value.getDate());

		context.write(new Text(key), new Text(mostRecent.getPid()));
	}
}

1.2) c
1.3) a


EXERCISE 2
inputPath1 = 'Servers.txt'
inputPath2 = 'Patches.txt'
inputPath3 = 'AppliedPatches.txt'
outputFolder1 = 'outputPart1/'
outputFolder2 = 'outputPart2/'

sc = SparkContext.getOrCreate()

appliedPatchesRDD = sc.textFile(inputPath3)
serversRDD = sc.textFile(inputPath1)
patchesRDD = sc.textFile(inputPath2)

#E2.1
mappedServersRDD = appliedPatchesRDD.filter(lambda l: l.split(',')[2].startswith('2022'))\
	.map(lambda l: (l.split(',')[1],1)

reducedServersRDD = serversPatchesRDD.reduceByKey(lambda v1, v2: v1+v2)
maxPatches = reducedServersRDD.reduce(lambda v1, v2: max(v1,v2))
maxPatchesPerServerRDD = reducedServersRDD.filter(lambda v: v[1]==maxPatches)

serversOsRDD = serversRDD.map(lambda l: (l.split(',')[0],l.split(',')[1]))

finalRDD = maxPatchesPerServerRDD.join(serversOsRDD).map(lambda v: (v[0],v[1][0]))
finalRDD.saveAsTextFile(outputFolder1)

#E2.2
#get (Pid, totPatches)
groupedPatchesRDD = patchesRDD.map(lambda l: (l.split(',')[0],1).reduceByKey(lambda v1, v2: v1+v2)

#get (Pid,Sid), totPatches) -> (Pid,(Sid,totPatches))
groupedAppliedPatchesRDD = appliedPatchesRDD.map(lambda l: ((l.split(',')[0],l.split(',')[1]),1)\
	.reduceByKey(lambda v1, v2: v1+v2).map(lambda v: (v[0][0],(v[0][1],v[1])))

#get (Pid, ((Sid,totParches),totPatches)
comparisonRDD = groupedAppliedPatchesRDD.join(groupedPatchesRDD).filter(lambda v: v[1][0][1]!=v[1][1])\
	.map(lambda v: (v[1][0][0], None))

finalRDD = mappedServersRDD.map(lambda l: (l[1],l[0])).subtractByKey(comparisonRDD)\
	.map(lambda l: (l[0],None))
finalRDD.saveAsTextFile(outputFolder2)

